    vector2AngleOld : function(angle) {
	this.vector1.subVectors(angle,this.position);
	angle.r=this.vector1.length();
	this.vector1.divideScalar(+angle.r);
	angle.xp=this.vector1.dot(this.axis.i);
	angle.yp=this.vector1.dot(this.axis.j);
	angle.zp=this.vector1.dot(this.axis.k);
	if (Math.abs(angle.xp) < 1e-7 && Math.abs(angle.zp) < 1e-7) {
	    angle.i=0.0;
	} else {
	    angle.i=Math.atan2(angle.xp,angle.zp);
	}
	if (Math.abs(angle.yp) < 1e-7 && Math.abs(angle.zp) < 1e-7) {
	    angle.j=0;
	} else {
	    angle.j=Math.atan2(angle.yp,angle.zp);
	}
	angle.k=0;
    },
    drawCylinderOnSphere : function (canvas,context,scene,camera,
				     posSphere,radSphere,axisCylinder,posCylinder,radCylinder,visible) {
    },
    drawDiscOnSphere : function (canvas,context,scene,camera,sphere,lat,normal,labelFunk) {
	// normal
	// lat
	// sphere.position
	// sphere.radius
	// make disc parameterisation axis
	var pos=new Vector3();
	var axis={i:new Vector3(),j:new Vector3(),k:new Vector3()};
	axis.k.clone(normal).normalize();
	axis.j.crossVectors(camera.axis.k,axis.k);
	axis.j.normalize();
	axis.i.crossVectors(axis.j, axis.k);
	pos.r=radius;
	// make sphere view axis
	sphere.pos=new Vector3();
	sphere.axis={i:new Vector3(),j:new Vector3(),k:new Vector3()};
	sphere.axis.k.subVector(sphere.position,camera.position);
	sphere.distance=sphere.axis.k.length();
	if (sphere.distance > sphere.radius) { // ONLY DRAW VISIBLE DISC
	    sphere.minlat=-Math.asin(sphere.distance/sphere.radius); // visible part of sphere
	    sphere.axis.k.divideScalar(sphere.distance);
	    sphere.axis.j.crossVectors(camera.axis.k,sphere.axis.k);
	    sphere.axis.j.normalize();
	    sphere.axis.i.crossVectors(sphere.axis.j, sphere.axis.k);
	    // draw disc
	    var firstDraw=true;
	    var firstPoint=true;
	    this.clockwise=true;
	    var n=64;
	    pos.lon=0;
	    pos.lat=lat;
	    this.resetPen();
	    for (var ii = 0; ii <= n; ii++){ // loop over points
		pos.lon=ii/n*Math.PI*2;
		pos.spherical2cartesian(axis); // relative to sphere center
		pos.add(sphere.position);      // relative to origo
		sphere.pos.copy(pos);
		sphere.pos.cartesian2spherical(sphere.axis);
		if (sphere.pos.lat > sphere.minlat) { // outline visible part of disc only

		    // keep track of where sphere.lon enters/exists, 
		    // draw curve along minlat on the "sunny" side of the sphere

		    sphere.pos.lat=sphere.minlat;
		    sphere.pos.spherical2cartesian(sphere.axis);

		    //pos.copy(sphere.pos);
		};
		camera.vector2Angle(pos);
		camera.angle2Screen(pos);
		this.movePen( context, camera,  pos, ii == n);
	    }
	} else { // INSIDE THE SPHERE
	    // draw disc
	    var firstDraw=true;
	    var firstPoint=true;
	    this.clockwise=true;
	    var n=64;
	    pos.lon=0;
	    pos.lat=lat;
	    this.resetPen();
	    for (var ii = 0; ii <= n; ii++){ // loop over points
		pos.lon=ii/n*Math.PI*2;
		pos.spherical2cartesian(axis); // relative to sphere center
		pos.add(sphere.position);      // relative to origo
		sphere.pos.copy(pos);
		sphere.pos.cartesian2spherical(sphere.axis);
		camera.vector2Angle(pos);
		camera.angle2Screen(pos);
		this.movePen( context, camera,  pos, ii == n);
	    }
	}
    },
    drawVisibleDiscOnSphere : function (canvas,context,scene,camera,sphere,lat,normal,labelFunk) {
	// normal
	// lat
	// sphere.position
	// sphere.radius
	// make disc parameterisation axis
	var pos=new Vector3();
	var axis={i:new Vector3(),j:new Vector3(),k:new Vector3()};
	axis.k.clone(normal).normalize();
	axis.j.crossVectors(camera.axis.k,axis.k);
	axis.j.normalize();
	axis.i.crossVectors(axis.j, axis.k);
	pos.r=radius;
	// make sphere view axis
	sphere.pos=new Vector3();
	sphere.axis={i:new Vector3(),j:new Vector3(),k:new Vector3()};
	sphere.axis.k.subVector(sphere.position,camera.position);
	sphere.distance=sphere.axis.k.length();
	if (sphere.distance > sphere.radius) {
	    sphere.axis.k.divideScalar(sphere.distance);
	    sphere.axis.j.crossVectors(camera.axis.k,sphere.axis.k);
	    sphere.axis.j.normalize();
	    sphere.axis.i.crossVectors(sphere.axis.j, sphere.axis.k);
	    sphere.minlat=-Math.asin(sphere.distance/sphere.radius); // visible part of sphere
	    // draw disc
	    var firstDraw=true;
	    var firstPoint=true;
	    this.clockwise=true;
	    var n=64;
	    pos.lon=0;
	    pos.lat=lat;
	    this.resetPen();
	    for (var ii = 0; ii <= n; ii++){ // loop over points
		pos.lon=ii/n*Math.PI*2;
		pos.spherical2cartesian(axis); // relative to sphere center
		pos.add(sphere.position);      // relative to origo
		sphere.pos.copy(pos);
		sphere.pos.cartesian2spherical(sphere.axis);
		if (sphere.pos.lat > sphere.minlat) { // outline visible part of disc only

		    // keep track of where sphere.lon enters/exists, 
		    // draw curve along minlat on the "sunny" side of the sphere

		    sphere.pos.lat=sphere.minlat;
		    sphere.pos.spherical2cartesian(sphere.axis);

		    //pos.copy(sphere.pos);
		};
		camera.vector2Angle(pos);
		camera.angle2Screen(pos);
		this.movePen( context, camera,  pos, ii == n);
	    }
	} else { // we are inside the sphere
	}
    },
    resetPen : function () {
	this.firstDraw=true;
	this.firstPoint=true;
    },
    movePen : function (context,camera,position, wrapup) {
	if (position.k !== undefined) {
	    // check if point is out of view
	    this.pow=camera.visible(position);
 	    if (this.pow ) { // inside
		if (this.firstDraw) {
		    if (firstPoint) {
			context.moveTo(position.w,position.h);
		    } else {
			context.moveTo(ow,oh);
			context.lineTo(position.w,position.h);
		    }
		    this.firstDraw=false;
		} else {
		    if (this.oov) { // previous point was out of view
			context.lineTo(this.ow,this.oh);
		    }
		    context.lineTo(position.w,position.h);
		}
		this.oov=false;
	    } else { // outside
		if (! this.firstPoint && ! this.oov) {
		    context.lineTo(position.w,position.h);
		}
		this.oov=true;
	    }
	    this.firstPoint=false;
	    this.ow=position.w;
	    this.oh=position.h
	}
    },
    getCorners : function (camera) {
	corners=[];
	pos={};
	pos.i=camera.getFovX();
	pos.j=camera.getFovY();
	camera.angle2Screen(pos);
	corners[0]= {w: pos.w, h: pos.h}; // lower right
	pos.i=-pos.i;
	camera.angle2Screen(pos);
	corners[1]= {w: pos.w, h: pos.h}; // lower left
	pos.j=-pos.j;
	camera.angle2Screen(pos);
	corners[2]= {w: pos.w, h: pos.h}; // upper left
	pos.i=-pos.i;
	camera.angle2Screen(pos);
	corners[3]= {w: pos.w, h: pos.h}; // upper right
	corners[4]={w: corners[0].w, h: corners[0].h};
	return corners;
    },
    drawCompassOld: function (canvas,context,scene,camera,item,radius,axis,dm,ml,pos) {
	context.font="30px Arial";
	var il=ml+(Math.PI/2-ml)*0.1; 
	var lons=[0.0,    22.5,    45.5,    67.5,    
		  90.0,  112.5,   135.0,   157.5, 
		  180.0, 202.5,   225.0,   247.5, 
		  270.0, 292.5,   315.0,   337.5];
	var lab=["S","SSW","SW","WSW",
		 "W","WNW","NW","NNW",
		 "N","NNE","NE","ENE",
		 "E","ESE","SE","SSE"];
	var style=["#ff0000","#000000","#990000","#000000",
		   "#ff0000","#000000","#990000","#000000",
		   "#ff0000","#000000","#990000","#000000",
		   "#ff0000","#000000","#990000","#000000"];
	pos.r=dm;
	// set context styles
	var ow,oh,oov;
	var n=lons.length;
	context.textAlign="center";
	for (var ii = 0; ii < n; ii++){ // loop over points
	    var label=lab[ii];
	    // draw triangle
	    var first=true;
	    context.beginPath();
	    for (var jj=-1;jj<=1;jj++){
		pos.lon=(lons[ii]+jj*5.0)*Math.PI/180.0;
		if (jj==0) {
		    pos.lat=ml;
		} else {
		    pos.lat=il;
		}
		pos.spherical2cartesian(axis);
		camera.vector2AngleRelative(pos);
		camera.angle2Screen(pos);
		if (pos.k !== undefined) {
		    if (first) {
			first=false;
			context.moveTo(pos.w,pos.h);
		    } else {
			context.lineTo(pos.w,pos.h);
		    }
		    if (jj==0) {// make label
			context.fillStyle="#ff0000";
			context.fillText(label,pos.w,pos.h);
		    }
		} 
	    }
	    if (! first) {
		context.fillStyle=style[ii];
		context.closePath(); // automatically moves back to bottom left corner
		context.fill();
	    }
	}
	context.textAlign="left";
    },
    drawLargeSphereOld : function (canvas,context,scene,camera,item,radius) {
	context.fillStyle="#770000";
	context.globalAlpha=0.5;
	var dm=Math.max(100000.0,Math.cos(radius)*item.distance); // minimum 100 km to horison
	var axis={i:new Vector3(),j:new Vector3(),k:new Vector3()};
	axis.k.subVectors(item.position,camera.position).normalize();
	axis.j.crossVectors(camera.axis.k,axis.k);
	axis.j.normalize();
	axis.i.crossVectors(axis.j, axis.k);
	var pos=new Vector3();
	var minlat=0.5*Math.PI-radius;
	this.drawLargeSphereDetails(canvas,context,scene,camera,item,radius,axis,dm,minlat,pos);
	context.globalAlpha=0.5;
	// re-orient the x-axis towards North, and draw compass...
	var bodies=model[model.current]["bodies"];
	if (bodies !== undefined) {
	    axis.j.crossVectors(bodies.observer.k,axis.k);
	    axis.j.normalize();
	    axis.i.crossVectors(axis.j, axis.k);
	    this.drawCompass(canvas,context,scene,camera,item,radius,axis,dm,minlat,pos);
	}
    },
    drawLargeSphereDetails : function (canvas,context,scene,camera,item,radius,axis,dm,minlat,pos) {
	// only draw visible points and the next/precvous point
	// draw corners (at the right position in the polygon) if they are inside...
	var corners=[];
	pos.r=dm;
	pos.k=0;
	pos.i=camera.getFovX();
	pos.j=camera.getFovY();
	camera.angle2Vector(pos);
	camera.angle2Screen(pos);
	pos.cartesian2Spherical(axis);
	corners[0]= {inside: (pos.lat > minlat), w: pos.w, h: pos.h, lat: pos.lat}; // lower right
	pos.i=-pos.i;
	camera.angle2Vector(pos);
	camera.angle2Screen(pos);
	pos.cartesian2Spherical(axis);
	corners[1]= {inside: (pos.lat > minlat), w: pos.w, h: pos.h, lat: pos.lat}; // lower left
	pos.j=-pos.j;
	camera.angle2Vector(pos);
	camera.angle2Screen(pos);
	pos.cartesian2Spherical(axis);
	corners[2]= {inside: (pos.lat > minlat), w: pos.w, h: pos.h, lat: pos.lat}; // upper left
	pos.i=-pos.i;
	camera.angle2Vector(pos);
	camera.angle2Screen(pos);
	pos.cartesian2Spherical(axis);
	corners[3]= {inside: (pos.lat > minlat), w: pos.w, h: pos.h, lat: pos.lat}; // upper right
	corners[4]={inside: corners[0].inside, w: corners[0].w, h: corners[0].h};
	// find first corner.
	var ifirst=-1;
	if (corners[0].inside) {ifirst=0;};
	for (var cc=0; cc<5; cc++) {
	    //console.log("Checking:",cc,corners[cc%4].inside,corners[(cc+1)%4].inside);
	    if (corners[(cc+1)%4].inside && ! corners[(cc)%4].inside) {
		ifirst=(cc+1)%4;
	    }
	}
	context.beginPath();
	var firstDraw=true;
	var firstPoint=true;
	if (ifirst != -1) {// add corners...
	    for (var cc=ifirst; cc< ifirst+4; cc++) {
		if (corners[cc%4].inside) {
		    //console.log("Adding corner:",cc,corners[cc%4].w,corners[cc%4].h);
		    if (firstDraw) {
			context.moveTo(corners[cc%4].w,corners[cc%4].h);
			firstDraw=false;
		    } else {
			context.lineTo(corners[cc%4].w,corners[cc%4].h);
		    }
		}
	    }

	}
	pos.r=dm;
	pos.lon=0;
	pos.lat=minlat;
	// set context styles
	var ow,oh,oov;
	var n=64;
	for (var ii = 0; ii <= n; ii++){ // loop over points
	    pos.lon=ii/n*Math.PI*2;
	    pos.spherical2cartesian(axis);
	    camera.vector2AngleRelative(pos);
	    camera.angle2Screen(pos);
	    if (pos.k !== undefined) {
		// check if point is out of view
		var pow=(pos.w < corners[0].w && pos.w > corners[2].w && pos.h < corners[0].h && pos.h > corners[2].h);
		//console.log("check:",pow,pos.w > corners[0].w,pos.w > corners[2].w,pos.h < corners[0].h,pos.h > corners[2].h);
		//console.log("corners:",pow,pos.h,corners[0].h,corners[2].h,pos.w,corners[0].w,corners[2].w);
 		if (pow ) { // inside
		    if (firstDraw) {
			if (firstPoint) {
			    context.moveTo(pos.w,pos.h);
			} else {
			    context.moveTo(ow,oh);
			    context.lineTo(pos.w,pos.h);
			}
			firstDraw=false;
		    } else {
			if (oov) { // previous point was out of view
			    context.lineTo(ow,oh);
			}
			context.lineTo(pos.w,pos.h);
		    }
		    oov=false;
		} else { // outside
		    if (! firstPoint && ! oov) {
			context.lineTo(pos.w,pos.h);
		    }
		    oov=true;
		}
		firstPoint=false;
		ow=pos.w;
		oh=pos.h
	    }
	}
	if (firstDraw && ifirst != -1) { // some corners are inside, but all points are out of view...
	    context.moveTo(corners[0].w,corners[0].h);
	    context.lineTo(corners[1].w,corners[1].h);
	    context.lineTo(corners[2].w,corners[2].h);
	    context.lineTo(corners[3].w,corners[3].h);
	    firstDraw=false;
	}
	if (! firstDraw) {
	    context.closePath(); // automatically moves back to bottom left corner
	    context.fill();
	}
    },

